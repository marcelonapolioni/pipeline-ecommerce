steps:
  # 1. Constrói a imagem Docker
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Docker Image'
    args: ['build', '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}', '.']

  # 2. Envia a imagem construída para o Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push to Artifact Registry'
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}']

  # 3. Faz o deploy do Cloud Run Job
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    id: 'Deploy Job'
    args:
      - 'beta'
      - 'run'
      - 'jobs'
      - 'deploy'
      - '${_SERVICE_NAME}-job'
      - '--image'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPOSITORY}/${_SERVICE_NAME}:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--service-account'
      - 'sa-cloud-build-pipeline@${PROJECT_ID}.iam.gserviceaccount.com'
      - '--set-env-vars'
      # ATENÇÃO: A variável BQ_TABLE_ID foi removida
      - 'GCP_PROJECT_ID=${PROJECT_ID},BQ_DATASET_ID=${_BQ_DATASET_ID}'

  # 4. Executa o Cloud Run Job
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    id: 'Execute Job'
    args:
      - 'run'
      - 'jobs'
      - 'execute'
      - '${_SERVICE_NAME}-job'
      - '--region'
      - '${_REGION}'
      - '--wait'

substitutions:
  _REGION: 'us-central1'
  _SERVICE_NAME: 'pipeline-ecommerce' # Nome atualizado para clareza
  _REPOSITORY: 'pipelines'
  _BQ_DATASET_ID: 'portfolio_dados'
  # A variável _BQ_TABLE_ID foi removida

options:
  logging: CLOUD_LOGGING_ONLY